# Manifesto for Agile Software Development

We are uncovering better ways of developing software by doing it and helping others do it.

Through this work we have come to value:

- **Individuals and interactions** over processes and tools
- **Working software** over comprehensive documentation
- **Customer collaboration** over contract negotiation
- **Responding to change** over following a plan

That is, while there is value in the items on the right, we value the items on the left more.

## Principles behind the Agile Manifesto

We follow these principles:

1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.
3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.
4. Business people and developers must work together daily throughout the project.
5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.
6. The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.
7. Working software is the primary measure of progress.
8. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.
9. Continuous attention to technical excellence and good design enhances agility.
10. Simplicity--the art of maximizing the amount of work not done--is essential.
11. The best architectures, requirements, and designs emerge from self-organizing teams.
12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.



--------------------------------------------------------------------------------------------------------------


# The GNU Manifesto

> The GNU Manifesto (which appears below) was written by Richard Stallman at the beginning of the GNU Project, to ask for participation and support. For the first few years, it was updated in minor ways to account for developments, but now it seems best to leave it unchanged as most people have seen it.

> Since that time, we have learned about certain common misunderstandings that different wording could help avoid. Footnotes added since 1993 help clarify these points.

> For up-to-date information about the available GNU software, please see the information available on our web server, in particular our list of software. For how to contribute, see http://www.gnu.org/help/help.html.

## What's GNU? Gnu's Not Unix!

GNU, which stands for Gnu's Not Unix, is the name for the complete Unix-compatible software system which I am writing so that I can give it away free to everyone who can use it.(1) Several other volunteers are helping me. Contributions of time, money, programs and equipment are greatly needed.

So far we have an Emacs text editor with Lisp for writing editor commands, a source level debugger, a yacc-compatible parser generator, a linker, and around 35 utilities. A shell (command interpreter) is nearly completed. A new portable optimizing C compiler has compiled itself and may be released this year. An initial kernel exists but many more features are needed to emulate Unix. When the kernel and compiler are finished, it will be possible to distribute a GNU system suitable for program development. We will use TeX as our text formatter, but an nroff is being worked on. We will use the free, portable X Window System as well. After this we will add a portable Common Lisp, an Empire game, a spreadsheet, and hundreds of other things, plus online documentation. We hope to supply, eventually, everything useful that normally comes with a Unix system, and more.

GNU will be able to run Unix programs, but will not be identical to Unix. We will make all improvements that are convenient, based on our experience with other operating systems. In particular, we plan to have longer file names, file version numbers, a crash proof file system, file name completion perhaps, terminal-independent display support, and perhaps eventually a Lisp-based window system through which several Lisp programs and ordinary Unix programs can share a screen. Both C and Lisp will be available as system programming languages. We will try to support UUCP, MIT Chaos net, and Internet protocols for communication.

GNU is aimed initially at machines in the 68000/16000 class with virtual memory, because they are the easiest machines to make it run on. The extra effort to make it run on smaller machines will be left to someone who wants to use it on them.

To avoid horrible confusion, please pronounce the g in the word “GNU” when it is the name of this project.

## Why I Must Write GNU

I consider that the Golden Rule requires that if I like a program I must share it with other people who like it. Software sellers want to divide the users and conquer them, making each user agree not to share with others. I refuse to break solidarity with other users in this way. I cannot in good conscience sign a nondisclosure agreement or a software license agreement. For years I worked within the Artificial Intelligence Lab to resist such tendencies and other in hospitalities, but eventually they had gone too far: I could not remain in an institution where such things are done for me against my will.

So that I can continue to use computers without dishonor, I have decided to put together a sufficient body of free software so that I will be able to get along without any software that is not free. I have resigned from the AI Lab to deny MIT any legal excuse to prevent me from giving GNU away.(2)

## Why GNU Will Be Compatible with Unix

Unix is not my ideal system, but it is not too bad. The essential features of Unix seem to be good ones, and I think I can fill in what Unix lacks without spoiling them. And a system compatible with Unix would be convenient for many other people to adopt.

## How GNU Will Be Available

GNU is not in the public domain. Everyone will be permitted to modify and redistribute GNU, but no distributor will be allowed to restrict its further redistribution. That is to say, proprietary modifications will not be allowed. I want to make sure that all versions of GNU remain free.

## Why Many Other Programmers Want to Help

I have found many other programmers who are excited about GNU and want to help.

Many programmers are unhappy about the commercialization of system software. It may enable them to make more money, but it requires them to feel in conflict with other programmers in general rather than feel as comrades. The fundamental act of friendship among programmers is the sharing of programs; marketing arrangements now typically used essentially forbid programmers to treat others as friends. The purchaser of software must choose between friendship and obeying the law. Naturally, many decide that friendship is more important. But those who believe in law often do not feel at ease with either choice. They become cynical and think that programming is just a way of making money.

By working on and using GNU rather than proprietary programs, we can be hospitable to everyone and obey the law. In addition, GNU serves as an example to inspire and a banner to rally others to join us in sharing. This can give us a feeling of harmony which is impossible if we use software that is not free. For about half the programmers I talk to, this is an important happiness that money cannot replace.

## How You Can Contribute

> (Nowadays, for software tasks to work on, see the High Priority Projects list and the GNU Help Wanted list, the general task list for GNU software packages. For other ways to help, see the guide to helping the GNU operating system.)

I am asking computer manufacturers for donations of machines and money. I'm asking individuals for donations of programs and work.

One consequence you can expect if you donate machines is that GNU will run on them at an early date. The machines should be complete, ready to use systems, approved for use in a residential area, and not in need of sophisticated cooling or power.

I have found very many programmers eager to contribute part-time work for GNU. For most projects, such part-time distributed work would be very hard to coordinate; the independently written parts would not work together. But for the particular task of replacing Unix, this problem is absent. A complete Unix system contains hundreds of utility programs, each of which is documented separately. Most interface specifications are fixed by Unix compatibility. If each contributor can write a compatible replacement for a single Unix utility, and make it work properly in place of the original on a Unix system, then these utilities will work right when put together. Even allowing for Murphy to create a few unexpected problems, assembling these components will be a feasible task. (The kernel will require closer communication and will be worked on by a small, tight group.)

If I get donations of money, I may be able to hire a few people full or part time. The salary won't be high by programmers' standards, but I'm looking for people for whom building community spirit is as important as making money. I view this as a way of enabling dedicated people to devote their full energies to working on GNU by sparing them the need to make a living in another way.

## Why All Computer Users Will Benefit

Once GNU is written, everyone will be able to obtain good system software free, just like air.(3)

This means much more than just saving everyone the price of a Unix license. It means that much wasteful duplication of system programming effort will be avoided. This effort can go instead into advancing the state of the art.

Complete system sources will be available to everyone. As a result, a user who needs changes in the system will always be free to make them himself, or hire any available programmer or company to make them for him. Users will no longer be at the mercy of one programmer or company which owns the sources and is in sole position to make changes.

Schools will be able to provide a much more educational environment by encouraging all students to study and improve the system code. Harvard's computer lab used to have the policy that no program could be installed on the system if its sources were not on public display, and upheld it by actually refusing to install certain programs. I was very much inspired by this.

Finally, the overhead of considering who owns the system software and what one is or is not entitled to do with it will be lifted.

Arrangements to make people pay for using a program, including licensing of copies, always incur a tremendous cost to society through the cumbersome mechanisms necessary to figure out how much (that is, which programs) a person must pay for. And only a police state can force everyone to obey them. Consider a space station where air must be manufactured at great cost: charging each breather per liter of air may be fair, but wearing the metered gas mask all day and all night is intolerable even if everyone can afford to pay the air bill. And the TV cameras everywhere to see if you ever take the mask off are outrageous. It's better to support the air plant with a head tax and chuck the masks.

Copying all or parts of a program is as natural to a programmer as breathing, and as productive. It ought to be as free.

## Some Easily Rebutted Objections to GNU's Goals

**“Nobody will use it if it is free, because that means they can't rely on any support.”**

**“You have to charge for the program to pay for providing the support.”**

If people would rather pay for GNU plus service than get GNU free without service, a company to provide just service to people who have obtained GNU free ought to be profitable.(4)

We must distinguish between support in the form of real programming work and mere handholding. The former is something one cannot rely on from a software vendor. If your problem is not shared by enough people, the vendor will tell you to get lost.

If your business needs to be able to rely on support, the only way is to have all the necessary sources and tools. Then you can hire any available person to fix your problem; you are not at the mercy of any individual. With Unix, the price of sources puts this out of consideration for most businesses. With GNU this will be easy. It is still possible for there to be no available competent person, but this problem cannot be blamed on distribution arrangements. GNU does not eliminate all the world's problems, only some of them.

Meanwhile, the users who know nothing about computers need handholding: doing things for them which they could easily do themselves but don't know how.

Such services could be provided by companies that sell just handholding and repair service. If it is true that users would rather spend money and get a product with service, they will also be willing to buy the service having got the product free. The service companies will compete in quality and price; users will not be tied to any particular one. Meanwhile, those of us who don't need the service should be able to use the program without paying for the service.

**“You cannot reach many people without advertising, and you must charge for the program to support that.”**

**“It's no use advertising a program people can get free.”**

There are various forms of free or very cheap publicity that can be used to inform numbers of computer users about something like GNU. But it may be true that one can reach more microcomputer users with advertising. If this is really so, a business which advertises the service of copying and mailing GNU for a fee ought to be successful enough to pay for its advertising and more. This way, only the users who benefit from the advertising pay for it.

On the other hand, if many people get GNU from their friends, and such companies don't succeed, this will show that advertising was not really necessary to spread GNU. Why is it that free market advocates don't want to let the free market decide this?(5)

**“My company needs a proprietary operating system to get a competitive edge.”**

GNU will remove operating system software from the realm of competition. You will not be able to get an edge in this area, but neither will your competitors be able to get an edge over you. You and they will compete in other areas, while benefiting mutually in this one. If your business is selling an operating system, you will not like GNU, but that's tough on you. If your business is something else, GNU can save you from being pushed into the expensive business of selling operating systems.

I would like to see GNU development supported by gifts from many manufacturers and users, reducing the cost to each.(6)

**“Don't programmers deserve a reward for their creativity?”**

If anything deserves a reward, it is social contribution. Creativity can be a social contribution, but only in so far as society is free to use the results. If programmers deserve to be rewarded for creating innovative programs, by the same token they deserve to be punished if they restrict the use of these programs.

**“Shouldn't a programmer be able to ask for a reward for his creativity?”**

There is nothing wrong with wanting pay for work, or seeking to maximize one's income, as long as one does not use means that are destructive. But the means customary in the field of software today are based on destruction.

Extracting money from users of a program by restricting their use of it is destructive because the restrictions reduce the amount and the ways that the program can be used. This reduces the amount of wealth that humanity derives from the program. When there is a deliberate choice to restrict, the harmful consequences are deliberate destruction.

The reason a good citizen does not use such destructive means to become wealthier is that, if everyone did so, we would all become poorer from the mutual destructiveness. This is Kantian ethics; or, the Golden Rule. Since I do not like the consequences that result if everyone hoards information, I am required to consider it wrong for one to do so. Specifically, the desire to be rewarded for one's creativity does not justify depriving the world in general of all or part of that creativity.

**“Won't programmers starve?”**

I could answer that nobody is forced to be a programmer. Most of us cannot manage to get any money for standing on the street and making faces. But we are not, as a result, condemned to spend our lives standing on the street making faces, and starving. We do something else.

But that is the wrong answer because it accepts the questioner's implicit assumption: that without ownership of software, programmers cannot possibly be paid a cent. Supposedly it is all or nothing.

The real reason programmers will not starve is that it will still be possible for them to get paid for programming; just not paid as much as now.

Restricting copying is not the only basis for business in software. It is the most common basis(7) because it brings in the most money. If it were prohibited, or rejected by the customer, software business would move to other bases of organization which are now used less often. There are always numerous ways to organize any kind of business.

Probably programming will not be as lucrative on the new basis as it is now. But that is not an argument against the change. It is not considered an injustice that sales clerks make the salaries that they now do. If programmers made the same, that would not be an injustice either. (In practice they would still make considerably more than that.)

**“Don't people have a right to control how their creativity is used?”**

“Control over the use of one's ideas” really constitutes control over other people's lives; and it is usually used to make their lives more difficult.

People who have studied the issue of intellectual property rights(8) carefully (such as lawyers) say that there is no intrinsic right to intellectual property. The kinds of supposed intellectual property rights that the government recognizes were created by specific acts of legislation for specific purposes.

For example, the patent system was established to encourage inventors to disclose the details of their inventions. Its purpose was to help society rather than to help inventors. At the time, the life span of 17 years for a patent was short compared with the rate of advance of the state of the art. Since patents are an issue only among manufacturers, for whom the cost and effort of a license agreement are small compared with setting up production, the patents often do not do much harm. They do not obstruct most individuals who use patented products.

The idea of copyright did not exist in ancient times, when authors frequently copied other authors at length in works of nonfiction. This practice was useful, and is the only way many authors' works have survived even in part. The copyright system was created expressly for the purpose of encouraging authorship. In the domain for which it was invented—books, which could be copied economically only on a printing press—it did little harm, and did not obstruct most of the individuals who read the books.

All intellectual property rights are just licenses granted by society because it was thought, rightly or wrongly, that society as a whole would benefit by granting them. But in any particular situation, we have to ask: are we really better off granting such license? What kind of act are we licensing a person to do?

The case of programs today is very different from that of books a hundred years ago. The fact that the easiest way to copy a program is from one neighbor to another, the fact that a program has both source code and object code which are distinct, and the fact that a program is used rather than read and enjoyed, combine to create a situation in which a person who enforces a copyright is harming society as a whole both materially and spiritually; in which a person should not do so regardless of whether the law enables him to.

**“Competition makes things get done better.”**

The paradigm of competition is a race: by rewarding the winner, we encourage everyone to run faster. When capitalism really works this way, it does a good job; but its defenders are wrong in assuming it always works this way. If the runners forget why the reward is offered and become intent on winning, no matter how, they may find other strategies—such as, attacking other runners. If the runners get into a fist fight, they will all finish late.

Proprietary and secret software is the moral equivalent of runners in a fist fight. Sad to say, the only referee we've got does not seem to object to fights; he just regulates them (“For every ten yards you run, you can fire one shot”). He really ought to break them up, and penalize runners for even trying to fight.

**“Won't everyone stop programming without a monetary incentive?”**

Actually, many people will program with absolutely no monetary incentive. Programming has an irresistible fascination for some people, usually the people who are best at it. There is no shortage of professional musicians who keep at it even though they have no hope of making a living that way.

But really this question, though commonly asked, is not appropriate to the situation. Pay for programmers will not disappear, only become less. So the right question is, will anyone program with a reduced monetary incentive? My experience shows that they will.

For more than ten years, many of the world's best programmers worked at the Artificial Intelligence Lab for far less money than they could have had anywhere else. They got many kinds of nonmonetary rewards: fame and appreciation, for example. And creativity is also fun, a reward in itself.

Then most of them left when offered a chance to do the same interesting work for a lot of money.

What the facts show is that people will program for reasons other than riches; but if given a chance to make a lot of money as well, they will come to expect and demand it. Low-paying organizations do poorly in competition with high-paying ones, but they do not have to do badly if the high-paying ones are banned.

**“We need the programmers desperately. If they demand that we stop helping our neighbors, we have to obey.”**

You're never so desperate that you have to obey this sort of demand. Remember: millions for defense, but not a cent for tribute!

**“Programmers need to make a living somehow.”**

In the short run, this is true. However, there are plenty of ways that programmers could make a living without selling the right to use a program. This way is customary now because it brings programmers and businessmen the most money, not because it is the only way to make a living. It is easy to find other ways if you want to find them. Here are a number of examples.

A manufacturer introducing a new computer will pay for the porting of operating systems onto the new hardware.

The sale of teaching, handholding and maintenance services could also employ programmers.

People with new ideas could distribute programs as freeware(9), asking for donations from satisfied users, or selling handholding services. I have met people who are already working this way successfully.

Users with related needs can form users' groups, and pay dues. A group would contract with programming companies to write programs that the group's members would like to use.

All sorts of development can be funded with a Software Tax:

Suppose everyone who buys a computer has to pay x percent of the price as a software tax. The government gives this to an agency like the NSF to spend on software development.

But if the computer buyer makes a donation to software development himself, he can take a credit against the tax. He can donate to the project of his own choosing—often, chosen because he hopes to use the results when it is done. He can take a credit for any amount of donation up to the total tax he had to pay.

The total tax rate could be decided by a vote of the payers of the tax, weighted according to the amount they will be taxed on.

The consequences:

- The computer-using community supports software development.
- This community decides what level of support is needed.
- Users who care which projects their share is spent on can choose this for themselves.

In the long run, making programs free is a step toward the postscarcity world, where nobody will have to work very hard just to make a living. People will be free to devote themselves to activities that are fun, such as programming, after spending the necessary ten hours a week on required tasks such as legislation, family counseling, robot repair and asteroid prospecting. There will be no need to be able to make a living from programming.

We have already greatly reduced the amount of work that the whole society must do for its actual productivity, but only a little of this has translated itself into leisure for workers because much nonproductive activity is required to accompany productive activity. The main causes of this are bureaucracy and isometric struggles against competition. Free software will greatly reduce these drains in the area of software production. We must do this, in order for technical gains in productivity to translate into less work for us.

## Footnotes

1. The wording here was careless. The intention was that nobody would have to pay for permission to use the GNU system. But the words don't make this clear, and people often interpret them as saying that copies of GNU should always be distributed at little or no charge. That was never the intent; later on, the manifesto mentions the possibility of companies providing the service of distribution for a profit. Subsequently I have learned to distinguish carefully between “free” in the sense of freedom and “free” in the sense of price. Free software is software that users have the freedom to distribute and change. Some users may obtain copies at no charge, while others pay to obtain copies—and if the funds help support improving the software, so much the better. The important thing is that everyone who has a copy has the freedom to cooperate with others in using it.
2. The expression “give away” is another indication that I had not yet clearly separated the issue of price from that of freedom. We now recommend avoiding this expression when talking about free software. See “Confusing Words and Phrases” for more explanation.
3. This is another place I failed to distinguish carefully between the two different meanings of “free”. The statement as it stands is not false—you can get copies of GNU software at no charge, from your friends or over the net. But it does suggest the wrong idea.
4. Several such companies now exist.
5. Although it is a charity rather than a company, the Free Software Foundation for 10 years raised most of its funds from its distribution service. You can order things from the FSF to support its work.
6. A group of computer companies pooled funds around 1991 to support maintenance of the GNU C Compiler.
7. I think I was mistaken in saying that proprietary software was the most common basis for making money in software. It seems that actually the most common business model was and is development of custom software. That does not offer the possibility of collecting rents, so the business has to keep doing real work in order to keep getting income. The custom software business would continue to exist, more or less unchanged, in a free software world. Therefore, I no longer expect that most paid programmers would earn less in a free software world.
8. In the 1980s I had not yet realized how confusing it was to speak of “the issue” of “intellectual property”. That term is obviously biased; more subtle is the fact that it lumps together various disparate laws which raise very different issues. Nowadays I urge people to reject the term “intellectual property” entirely, lest it lead others to suppose that those laws form one coherent issue. The way to be clear is to discuss patents, copyrights, and trademarks separately. See further explanation of how this term spreads confusion and bias.
9. Subsequently we learned to distinguish between “free software” and “freeware”. The term “freeware” means software you are free to redistribute, but usually you are not free to study and change the source code, so most of it is not free software. See “Confusing Words and Phrases” for more explanation.


--------------------------------------------------------------------------------------------------------------


# The Zero Dollar Laptop Manifesto


The zero dollar laptop is here!

The zero dollar laptop is widely available to individuals in the developed world. It's also available to businesses, governmental organisations and NGOs. It's also available in the developing world. Distribution is ramping up.

The zero dollar laptop comes in a variety of specifications.

The current typical specification of the zero dollar laptop in the UK is around 500mHz, with 256mB RAM, a 10 gigabyte hard disk, a network card, a CD-ROM, a USB port and a screen capable of displaying at least 800x600 pixels in 16-bit colour. Many zero dollar laptops are better specified. (Its close cousin, the zero dollar desktop, typically runs at 1000mHz or faster.)

The zero dollar laptop is constantly being upgraded - so by next year its specification will be even more powerful.

The zero dollar laptop is powered with free, open source software. Users can get involved as deeply as they want - the software packages available include easy to use graphical applications, more complex professional applications, and expert level programming languages.

Free software upgrades for the zero dollar laptop are constantly being made available, from a huge variety of software producers.

The zero dollar laptop is not intended simply for multimedia entertainment. Though it can an educational playground, it can also be a genuinely useful production platform.

The zero dollar laptop allows kids to learn and adults to produce. (Only when people are able to use computers to produce their own data does information communication technology become genuinely empowering.)

The zero dollar laptop has already been distributed. (You weren't told about it at the time of distribution.)

Individuals, businesses and non-profit organisations can all have a say in how the zero dollar laptop is rolled out in their local area. It's not up to government think-tanks, multinational NGOs or national policy boards.

The zero dollar laptop is available to individuals, education organisations, NGOs and businesses alike.

The carbon footprint of the zero dollar laptop is zero.

You, as an individual, may already own a zero dollar laptop.

What's it doing? Sitting on your shelf, unused, because you've already upgraded?

Your employer or your school may own a large number of zero dollar laptops.

What are they doing? Are they getting recycled responsibly (i.e. destroyed) by the company that supplied them? (That's often the company that just happens to be supplying the next generation of laptops.)

Perhaps surprisingly, you may not know how to install or operate the zero dollar laptop.

You may never have installed a free, open source operating system. You may never have installed any operating system.

Nowadays it's quite easy. You can download a full version of the Linux operating system appropriate for the specification of your zero dollar laptop for free. It's entirely legal.

Many versions of Linux are user-friendly. There are lots of help resources online, and there are likely to be local people who'll be happy to give you advice.

You may be unaware of lightweight window-managers that use memory more efficiently. You may never have used powerful, compatible free office and productivity software. It may surprise you to discover that free software can be better than software you can buy.

You may be reluctant to invest time, of which you may only have a little, rather than invest money - of which you may have plenty.

Think about the longer-term consequences: buy software and you'll have to pay again and again. Invest time learning about free software, and you'll never have to pay for software again.

For the sake of the planet, and for the sake of a fair, just, and cohesive society, isn't it about time you learned? Then maybe you could teach someone else.

You may ask, "Why isn't someone doing something to roll out the zero dollar laptop?" In developed-world economies and cultures we're familiar with centralised solutions. We're less familiar with localised, decentralised, do-it-yourself solutions. In this case, that "someone" is you.

Decentralised solutions like the zero dollar laptop may not seem to be as efficient as centralised solutions. However, efficiency isn't everything. Solutions of this character are more robust, more responsive to local circumstances, greener, more flexible, and they encourage local skill development and independence.

You may have to spend unpaid time learning about and implementing the distribution of a few zero dollar laptops in your area. Think about the contacts you'll make and the skills you'll learn. Think about the skills you'll help to develop, the lives you may transform, the fun you'll have.

The emergence of the zero dollar laptop as a key computing platform for empowering individuals, stimulating creativity, overcoming poverty and enriching our shared culture is entirely feasible without any additional research, design, or manufacture.

We already have all the tools we need - all we need to manufacture is the will to act locally; all we need to replace is the software on our hard drives; all we need to develop is the content of our minds.

James Wallbank, Sheffield, September 2007

## Zero Dollar Laptop Manifesto Notes

In 1999 I wrote the Lowtech Manifesto [\url{http://lowtech.org/projects/n5m3/}]. That small document has been widely circulated, quoted and translated, and seems to have influenced, and encouraged) a large number of people concerned with developments at the cutting edge of digital culture. It’s become clear to me that sometimes, all that’s needed is for someone to state what’s needed and call for action. Think of this methodology as a “WhyTo” rather than a “HowTo”.

At the time I proposed a creative approach to technology re-use. As a result of my decision to re-use technology, I haven’t needed to buy a computer in the last decade. I’ve been involved in the development of a whole series of innovative digital artworks and the establishment of “Access Space”, an open access space for the local community to learn, create and communicate using recycled computers running free, open source software.

At the time of the Lowtech Manifesto, Professor Nicholas Negroponte pointed out (and was quoted in “Wired” magazine) the pressing social need for an accessibly priced computer. He reflected that the industry simply wasn’t interested in engaging in the low profit, “commodity computing” market, and set about campaigning for the production of a $100 laptop.

At the time, laptops cost around $1000 or more – but as we know, the price has been falling. Now new, generic, no-brand computers (and Dell workstations) are available for less than $500.

To avoid the early emergence of commodity computing, in the last few years manufacturers have been encouraging consumers to switch to laptops. Laptops are great for the industry, because they often use fiddly, proprietary spare parts (only supplied by the manufacturer), they’re difficult or impossible to upgrade, and their lifespan is much lower than that of a desktop (if only because people drop them more often!)

However, the industry hasn’t been able to resist the trend for long – in the UK you can sign up for some broadband packages and get a new laptop for nothing – in very much the same way that you can buy a mobile phone contract and get an expensive handset apparently for free.

Although the industry doesn’t like to acknowledge it, the age of commodity computing is now here.

Meanwhile, the Linux free operating system and associated free software packages, have developed hugely. Linux is now very straightforward to use and provides a powerful suite of software which many experts agree is superior to the software you can buy.

Linux is very compatible with other systems, and research conducted on behalf of the UK government suggests it make much more efficient use of a given hardware specification. Effectively, it doubles the useful lifespan of a computer. It’s the key to unlocking the potential of the zero dollar laptop.

So at last, the industry has agreed to assist with Professor Negroponte’s plans, and the $100 laptop has started to be produced.

The $100 laptop has transformed into the “One Laptop Per Child” project. The price point has not been attainable – at the time of writing (September 2007) the price is about $176. There’s also a “Give One Get One” deal – for $399 you buy two, and you get one to keep, while another is shipped to a poor country.

Very sensibly, Professor Negroponte has pointed out that the vision isn’t about laptops – it’s about education. Don’t get me wrong! I’m very positive about some aspects of the vision of the One Laptop Per Child Foundation. Distributing information technology may have hugely positive educational and empowering effects.

However, I’ve got some major issues with the “One Laptop per Child” $100 laptop project.

* It’s ten years too late.
* It’s $176 overpriced.
* The project is limited to laptops for children in poor countries.
* Even if you “Give One Get One”, nobody who’s the wrong side of the digital divide in developed countries gets help.
* Whatever they say, the industry has become involved on terms still hugely orientated around consumerism, not empowerment.
* It’s still a top-down process, by which rich, powerful institutions determine “the solution” and distribute it to poor, less powerful institutions, who distribute it to recipients whose role is essentially passive.

This manifesto talks about a laptop, but it isn’t concerned with technology for its own sake. The issue is whether technology has an educational, empowering effect.

Technology has the power to amplify opportunity – but it also has the capacity to amplify social division: to make the rich richer, and the poor poorer.

For technology to be a force for good, it should genuinely make its users more independent, autonomous, fulfilled and happy.




